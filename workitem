- script: |
    pip install azure-devops
- task: PythonScript@0
  inputs:
    scriptSource: 'inline'
    script: |
        from azure.devops.connection import Connection
        from msrest.authentication import BasicAuthentication
        from azure.devops.v6_0.work_item_tracking.models import JsonPatchOperation
        from azure.devops.v6_0.work_item_tracking.models import Wiql
        
        url = 'https://dev.azure.com/'
        personal_access_token = ''
        # Create a connection to Azure DevOps using the API and authentication
        credentials = BasicAuthentication('', personal_access_token)
        connection = Connection(base_url=url, creds=credentials)
        # Define the project and work item type to create
        project_name = 'Sai'
        work_item_type = 'Task'

        # Define the fields and values for the new work item
        new_work_item = [
          JsonPatchOperation(
          op='add',
          path='/fields/System.Title',
          value='My Task'
        ),
        JsonPatchOperation(
        op='add',
        path='/fields/System.Description',
        value='This is a description for my task'
          ),
        ]
 
        work_item_client = connection.clients.get_work_item_tracking_client()
        # result = work_item_client.create_work_item(
        #    document=new_work_item,
        #    project=project_name,
        #    type=work_item_type
        # )
        work_item_title = 'test1'
        #print('New work item created with ID: {}'.format(result.id))
        #work_items = wit_client.query_by_wiql("SELECT [System.Id], [System.Title], [System.State] FROM WorkItems WHERE [System.Title] = '{}'".format(work_item_title)).work_items
        wiql_query = Wiql(query="SELECT [System.Id], [System.Title], [System.State] FROM workitems WHERE [System.WorkItemType] = 'Task'")

        query_result = work_item_client.query_by_wiql(wiql_query).work_items
        for work_item_ref in query_result:
          work_item = work_item_client.get_work_item(work_item_ref.id)
          print(f"{work_item.id} - {work_item.fields['System.Title']} - {work_item.fields['System.State']}")
          
          
          
          
          
 
 


.................................................................................................................. 
 
from azure.devops.connection import Connection
from msrest.authentication import BasicAuthentication
from azure.devops.v6_0.work_item_tracking.models import JsonPatchOperation, Operation

# Set up authentication and connection to the Azure DevOps organization
personal_access_token = 'your_personal_access_token'
organization_url = 'https://dev.azure.com/your_organization'
credentials = BasicAuthentication('', personal_access_token)
connection = Connection(base_url=organization_url, creds=credentials)

# Define the ID of the work item to be deleted
work_item_id = 12345

# Get a reference to the work item tracking client
wit_client = connection.clients.get_work_item_tracking_client()

# Define the JSON patch operation to delete the work item
delete_operation = JsonPatchOperation()
delete_operation.op = Operation.REMOVE.value
delete_operation.path = '/fields/System.Id'
delete_operation.value = str(work_item_id)

# Apply the patch operation to the work item
wit_client.update_work_item(patch_document=[delete_operation], id=work_item_id)

print(f"Work item {work_item_id} has been deleted.")




work_item = work_item_client.get_work_item(6, project_name, expand='All')

# List all fields of the work item
for field in work_item.fields:
    print(f'{field}: {work_item.fields[field]}')



status_patch = JsonPatchOperation(
    op='replace',
    path='/fields/System.State',
    value='Done'
)

reason_patch = JsonPatchOperation(
    op='add',
    path='/fields/System.Reason',
    value='Completed'
)

patch_document = [status_patch, reason_patch]


updated_work_item = work_item_client.update_work_item(
    document=patch_document,
    id=6
)


from datetime import datetime, timedelta

today = datetime.today()  # Get today's date
future_date = today + timedelta(days=30)  # Get the date 30 days from today's date

print(future_date)  # Print the future date

